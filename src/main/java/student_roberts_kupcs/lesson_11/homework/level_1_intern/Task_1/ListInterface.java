package student_roberts_kupcs.lesson_11.homework.level_1_intern.Task_1;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import teacher.codereview.CodeReview;

@CodeReview(approved = true)
class ListInterface {
    public static void main(String[] args) {

        //ArrayList — это классический массив, который может расширяться
        // в момент выполнения программы.
        //Так же, как и статический массив, индексируется с 0;
        //Вставка в конец и доступ по индексу очень быстрые — О(1);
        //Чтобы вставить элемент в начало или середину, понадобится скопировать все элементы на одну ячейку вправо, а затем вставить новый элемент на необходимую позицию;
        //Доступ по значению зависит от количества элементов — О(n);
        //В отличие от классического массива, может хранить null;

        List<String> strings = new ArrayList<>();

        // Новый элемент добавляется в конец
        strings.add("Roberts");
        // Новый элемент добавляется в указанную позицию (в данном случае — в начало)
        strings.add(0, "Roberts");
        // Удаление элемента по индексу
        strings.remove(0);
        // Удаление элемента по значению
        strings.remove("Roberts");

        //LinkedList : в его основе лежит двусвязанный список.
        // структурно этот динамический массив Java представляет из себя некоторое
        // количество разбросанных объектов, которые ссылаются друг на друга.

        //Так же, как и массив, индексируется с 0;
        //Доступ к первому и последнему элементу не зависят от количества элементов — О(1);
        //Получение элемента по индексу, вставка или удаление из середины списка зависят от количества элементов — О(n);
        //Можно использовать механизм итератора: тогда вставка и удаление будут происходить за константное время;
        //В отличие от классического массива, может хранить null.

        LinkedList<String> strings1 = new LinkedList<>();

        // Новый элемент добавляется в конец двусвязного списка
        strings1.add("Java");
        // Новый элемент добавляется в нулевую позицию списка:
        strings1.addFirst("JavaGuru");
        // Новый элемент добавляется в конец списка
        strings1.addLast("Roberts");
        // Новый элемент добавляется в указанную позицию
        strings1.add(2, "Roberts");
        // Удаление первого элемента в списке
        strings1.removeFirst();
    }
}
