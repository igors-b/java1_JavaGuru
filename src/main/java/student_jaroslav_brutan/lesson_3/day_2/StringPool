1) Где хранятся обьекты класса String?

В куче (String pool)

2) Как определить длинну строки?

Методом length(). Он позволяет определять длину строк в Java
 и сравнивать длины этих строк между собой.
 public class Main {

    public static void main(String args[]){
       String Str1 = new String("Добро пожаловать на сайт Otus.ru!");
       String Str2 = new String("Otus.ru" );

       System.out.print("Длина строки \" Добро пожаловать на сайт Otus.ru!\" - " );
       System.out.println(Str1.length());

       System.out.print("Длина строки \" Otus.ru\" - " );
       System.out.println(Str2.length());
    }
 }

 3) Как сравнивать две строки?

 public class Main {

    public static void main(String args[]) {
       // Определяем длины строки s1 и s2.
       String s1 = "В Otus я стану отличным программистом!";
       int len1 = s1.length();
       String s2 = "В Otus я стану отличным разработчиком!";
       int len2 = s2.length();

       // Вывод на экран количества символов в каждой строке.
       System.out.println( "Длина строки \"В Otus я стану отличным программистом!\": " + len1 + " символов.");
       System.out.println( "Длина строки \"В Otus я стану отличным разработчиком!\": " + len2 + " символов.");

       // Сравнение длин строк s1 и s2.
       if (len1 > len2){
           System.out.println( "\nСтрока \"В Otus я стану отличным программистом!\" длиннее строки \"В Otus я стану отличным разработчиком!\".");
       }
       if (len1 < len2){
           System.out.println( "\nСтрока \"В Otus я стану отличным программистом!\" короче строки \"В Otus я стану отличным разработчиком!\".");
       }
       else {
           System.out.println( "\nСтроки \"В Otus я стану отличным программистом!\" и \"В Otus я стану отличным разработчиком!\" равны.");
       }
    }
 }

 Java String Pool - специальная область памяти, где Strings хранятся в JVM.
 Благодаря неизменности Strings в Java, JVM может оптимизировать объем памяти,
 выделенный для них, сохраняя только одну копию каждого литерала String в пуле .
 Когда мы создаем переменную String и присваиваем ей значение,
 JVM ищет в пуле String с равным значением.
 Если он не найден, он будет добавлен в пул (интернирован) и его ссылка будет возвращена.
 Когда мы создаем String с помощью оператора new , компилятор Java создаст новый объект
 и сохранит его в пространстве кучи, зарезервированном для JVM.
 Каждая строка String , созданная таким образом, будет указывать на другую область памяти
 со своим собственным адресом.
 Когда мы создаем объект String с помощью оператора new () , он всегда создает новый объект
 в памяти кучи. С другой стороны, если мы создаем объект с использованием буквенного
 синтаксиса String , например, «Baeldung», он может вернуть существующий объект из пула строк,
 если он уже существует. ** В противном случае он создаст новый объект String и поместит
 в пул строк для будущего повторного использования.
 На высоком уровне оба являются объектами String , но основное различие заключается в том,
 что оператор new () всегда создает новый объект String.
 Кроме того, когда мы создаем String с использованием литерала - он интернируется.
 Мы можем вручную обработать String в Java String Pool, вызвав метод intern () для объекта,
 который мы хотим интернировать.
 Интернирование String вручную сохранит его ссылку в пуле, а JVM вернет эту ссылку
 при необходимости.
