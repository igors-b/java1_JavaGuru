Тема: Самостоятельное изучение класса String.

Поищите в интернете информацию про класс String в Java.
Прочтите несколько статей. Попробуйте найти ответы на
следующие вопросы:

- Где ханитятся обьекты класса String? - ссылка в стэке, объект в куче

- Как определить длину строки? - метод length();

- Как сравнивать две строки?

Сравниваем методом equals(); или equalsIgnoreCase()

== сравнивает адреса в памяти, не действует, если создана через new

Метод intern() напрямую работает со String Pool’ом -
Смотрит, есть ли строка с таким текстом в пуле строк
Если есть — возвращает ссылку на нее в пуле
Если же нет — помещает строку с этим текстом в пул строк и возвращает ссылку на нее.
Применив метод intern() к ссылке на строку, которая создавалась через new, мы можем сравнивать ее со ссылкой на строку из String Pool’a через оператор ==.

public class Main {

   public static void main(String[] args) {

       String s1 = "JavaRush - лучший сайт для изучения Java!";
       String s2 = new String("JavaRush - лучший сайт для изучения Java!");
       System.out.println(s1 == s2.intern());
   }
} --> true

- Что такое String Pool и зачем он нужен? - это сложный вопрос!
Кто разберётся и сможет обьяснить заслужит +1 к карме.

Пул строк — область для хранения всех строковых значений, которые ты создаешь в своей программе.
Не хранит одинаковые строки и экономит память
Создавая повторяющуюся, новая ссылка будет указывать на тот же адрес в пуле строк, где эта строка хранится.

О ПАМЯТИ:
Java Heap Memory куча
Когда эта область памяти полностью заполняется, Java бросает java.lang.OutOfMemoryError
Доступ к ней медленнее, чем к стеку
Эта память, в отличие от стека, автоматически не освобождается. Для сбора неиспользуемых объектов используется сборщик мусора
В отличие от стека, куча не является потокобезопасной и ее необходимо контролировать, правильно синхронизируя код
Эта область памяти используется для объектов и классов. Новые объекты всегда создаются в куче, а ссылки на них хранятся в стеке

Эти объекты имеют глобальный доступ и могут быть получены из любого места программы
    ▸ Created objects are stored in the heap space
    ▸ Lives from the start till the end of application execution
    ▸ Objects stored in heap are globally accessible
▸ Java Stack Memory
Всякий раз, когда вызывается новый метод, содержащий примитивные значения или ссылки на объекты,
то на вершине стека под них выделяется блок памяти
Когда метод завершает выполнение, блок памяти, отведенный для его нужд, очищается, и пространство
становится доступным для следующего метода
Он заполняется и освобождается по мере вызова и завершения новых методов
Переменные в стеке существуют до тех пор, пока выполняется метод в котором они были созданы
Если память стека будет заполнена, Java бросит исключение java.lang.StackOverFlowError
    ▸ Contains local primitive variables and reference variables to objects in
    heap space
    ▸ Lives only within method execution, short-lived
    ▸ Bound to the current execution thread

