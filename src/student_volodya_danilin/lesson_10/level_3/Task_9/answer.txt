@CodeReview(approved = true)

##    -Для чего применяются объекты этого класса?
Класс Optional облегчает жизнь программиста. С его помощью
можно не делать бесконечные проверки на NullPointerException.
Optional работает как контейнер для переменных, которые ещё могут быть
не созданы.

##    -Какие два состояния могут быть у объектов этого класса?
1. ссылка на объект;
2. empty если объект ещё не создан.

##    -Как создаются экземпляры данного класса?
     ClassName object = new ClassName();

//Optional объект с возможностью нулевого(null) значения.
    Optional<ClassName> sc = Optional.ofNullable(object);
Если object = null, то мы получим пустой Optional объект sc

//Optional объект с ненулевым(!null) значением
    Optional<ClassName> sc = Optional.of(object);
Если object на момент запуска будет null то мы сразу это узнаем,
а не потом, когда будем пытаться достучаться до object.

//пустой объект класса Optional
    Optional<ClassName> sc = Optional.empty();

##    -Как можно проверить в каком состоянии находится экземпляр
##    данного класса?
Можем пользоваться методами класса Optional .isEmpty() либо .isPresent();
    if (sc.isEmpty()) {
    }
    else {
    };

##  -Как можно получить объект, который находится внутри Optional?
Можем пользоваться методом .get(), но сперва лучше проверить состояние
Optional объекта.
    if(sc.isPresent()) {
       print("Found" + sc.get());
    }
    else {
       print("Optional is empty");
    }
Если не проверять состояние Optional'а то можно наткнуться
на ошибку NoSuchElementException