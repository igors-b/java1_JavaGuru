##    -Для чего применяются объекты этого класса?
Класс Optional облегчает жизнь программиста. С его помощью
можно не делать бесконечные проверки на nullPointerException.
Optional работает как контейнер для переменных, которые ещё могут не
существовать.

##    -Какие два состояния могут быть у объектов этого класса?
Может быть ссылка на объект, а может быть empty

##    -Как создаются экземпляры данного класса?
     ClassName object = new ClassName();

//Optional.ofNullable(variable) - Optional объект с возможностью
//нулевого(null) значения.
 Optional<ClassName> sc = Optional.ofNullable(object);
Если object = null, то мы получим пустой Optional объект sc

//Optional.of(variable) - объект с ненулевым(!null) значением
 Optional<ClassName> sc = Optional.of(object);
Если object на момент запуска будет null то мы сразу это узнаем,
а не потом, когда будем пытаться достучаться то object.

//Optional.empty() - пустой объект класса Optional
 Optional<ClassName> sc = Optional.empty();

##    -Как можно проверить в каком состоянии находится экземпляр
##    данного класса?
Можем пользоваться методами класса Optional .isEmpty() либо .isPresent();
 if (sc.isEmpty()) {
 }
 else {
 };

##  -Как можно получить объект, который находится внутри Optional?
Можем пользоваться методом .get(), но сперва лучше проверить состояние
Optional объекта.
 if(sc.isPresent()) {
    print("Found" + sc.get());
 }
 else {
    print("Optional is empty");
 }